/*  libTSXA.c  - this file auto generated by tools */

/* modification history
-----------------------

02a 2021-04-16 10:30:29    增加多个端口选择，一旦连接不上就换个端口重试
01b 2016-07-14 17:28:49    修改为多线程安全方式
01a 2016-05-05 11:00:17     auto create by autogen moban tool
*/

/*
<autogen moban tool>
  author: frank
  bug report: frank_zhou@163.com
*/



#define  TS_C

#include "golytec.h"
#include "libTSXA.h"
#include "TSXI.h"

#include "DNXA.h"
#include "DTXA.h"

#pragma comment(lib,"ws2_32.lib")


// 连接的server name选择，也就是网络端口选择
int g_tsxa_server_name_select = 0; 



// 注释掉DT接口函数
#define  DTXA_trace_t  
//#define  DTXA_check_sim_mode_t
BOOL DTXA_check_sim_mode_t
                    (
                    IN      const char *comp_id,                    // 组件名
                    IN      DTXA_SIM_MODE_ENUM sim_mode             // 仿真模式
                    )
{
    return 0;
}



int  tsxa_st_get_mover_id_all_start(void);



// 2021.3.13 增加检测用户线程是否调用过DN网络初始化的判断，如果没有调用过就自动调用DN网络初始化

#define     TSXA_DN_TASK_NUM_MAX    1000            // 允许用户线程调用的最大个数
typedef struct
{
    UINT32 thread_id[TSXA_DN_TASK_NUM_MAX];                 // 线程id
    BOOL  DN_task_inited[TSXA_DN_TASK_NUM_MAX];             // 线程是否已经DN网络初始化
} TSXA_DN_TASK_INFO_struct;


// 线程调用DN网络初始化的注册信息表
TSXA_DN_TASK_INFO_struct  g_tsxa_DN_task_info = { 0 };

// 自动判断用户线程是否已经DN网络初始化，如果没有就自动调用DN网络初始化
int tsxa_DN_task_init_auto
                (
                IN BOOL re_reg              // 是否强制将线程重新init_network注册网络
                )
{
    int rtn = OK;
    UINT32 thread_id = 0;
    int i = 0;
    int index = -1;

    // 获取本线程id
    thread_id = GetCurrentThreadId();

    // 查找信息表
    for( i = 0; i < TSXA_DN_TASK_NUM_MAX; i++ )
    {
        if( g_tsxa_DN_task_info.thread_id[i] == thread_id )
        {
            index = i;
            break;
        }
    }

    // 没有找到, 找到一个没有被注册的位置，填入
    if( index == -1 )
    {
        for( i = 0; i < TSXA_DN_TASK_NUM_MAX; i++ )
        {
            if( g_tsxa_DN_task_info.DN_task_inited[i] != TRUE )     // 故意用==true来判断，防止系统默认值为非0
            {
                g_tsxa_DN_task_info.thread_id[i] = thread_id;
                index = i;
                break;
            }
        }
    }

    if( index != -1 )
    {
        // 未注册
        if( ( g_tsxa_DN_task_info.DN_task_inited[index] != TRUE ) || ( re_reg) )
        {
            rtn = DNXA_task_init_t(NULL);
            if( OK == rtn )
            {
                g_tsxa_DN_task_info.DN_task_inited[index] = TRUE;
            }
            Sleep(10);
        }
    }
    else        // 注册的线程已经超过最大值
    {
        rtn = TSXA_DN_TASK_NUM_INIT_EXCEED_ERROR;
    }

    return rtn;
}


// 网络终止，自动判断用户线程是否已经DN网络初始化，如果有就自动调用DN网络终止
int tsxa_DN_task_exit(void)
{
    int rtn = OK;
    UINT32 thread_id = 0;
    int i = 0;
    int index = -1;

    // 获取本线程id
    thread_id = GetCurrentThreadId();

    // 查找信息表
    for( i = 0; i < TSXA_DN_TASK_NUM_MAX; i++ )
    {
        if( g_tsxa_DN_task_info.thread_id[i] == thread_id )
        {
            index = i;
            break;
        }
    }

    if( index != -1 )
    {
        rtn = DNXA_task_exit_t();
        g_tsxa_DN_task_info.DN_task_inited[index] = FALSE;
        g_tsxa_DN_task_info.thread_id[index] = 0;
        Sleep(10);
    }

    return rtn;
}


// 说明: 如果结体比较大的话，请修改为全局变量，此处不要注释，而是将每个接口内的注释掉
// TSXI_REQ_MSG_struct req_msg;
// TSXI_RPL_MSG_struct rpl_msg;


/* DN发送接收数据包封装 */

/* 发送时以实际数据包大小发送，不整个union数据包发送 */
int TSXI_snd_req_msg( TSXI_REQ_MSG_struct *p_req, int size, int timeout, BOOL use_MA_2)
{
    int DN_rtn = 0;
    int rtn = OK;
    int sendsize = 0;
    int i = 0;

    tsxa_DN_task_init_auto(0);

    if(p_req == NULL)
    {
        rtn = TSXA_PARAMETER_ERROR;
    }

    if( rtn == OK )
    {
        sendsize = size + 16;     /* + 16头部 */
        
        // 连接不上时进行重试
        for( i = 0; i < 4; i++ )
        {
            switch( g_tsxa_server_name_select )
            {
                case   0:
                    DN_rtn = DNXA_send_request_t(TSXA_MA_ADDR, (void *)p_req, sendsize, timeout);
                    break;
                case   1:
                    DN_rtn = DNXA_send_request_t(TSXA_MA_ADDR_2, (void *)p_req, sendsize, timeout);
                    break;
                case   2:
                    DN_rtn = DNXA_send_request_t(TSXA_MA_ADDR_3, (void *)p_req, sendsize, timeout);
                    break;
                case   3:
                    DN_rtn = DNXA_send_request_t(TSXA_MA_ADDR_4, (void *)p_req, sendsize, timeout);
                    break;
               default:
                    DN_rtn = DNXA_send_request_t(TSXA_MA_ADDR, (void *)p_req, sendsize, timeout);
                    g_tsxa_server_name_select = 0;
                    break;
            }

            if( DNXA_SERVER_NOT_LISTENING == DN_rtn )   // 连接不上，尝试更换网络端口重试
            {
                g_tsxa_server_name_select = ( g_tsxa_server_name_select + 1 ) % 4;
                continue;
            }
            else if( DNXA_NOT_INITIALIZED == DN_rtn )   // 提示未注册网络成功，重新强制注册一下
            {   
                tsxa_DN_task_init_auto(1);
            }
            else if( OK == DN_rtn )
            {
                // debug by frank 2021.4.17
//                printf("g_tsxa_server_name_select = %d\n", g_tsxa_server_name_select);
                break;
            }
        }

        
        rtn = DN_rtn;
    }

    return rtn;
}


int TSXI_rec_rpl_msg( TSXI_RPL_MSG_struct *p_rpl, TSXI_FUNC_enum func_code, int timeout, BOOL use_MA_2 )
{
    int DN_rtn = 0;
    int size = 0;
    int act_len = 0;
    int rtn = OK;
    int i = 0;

    tsxa_DN_task_init_auto(0);

    if(p_rpl == NULL)
    {
        rtn = TSXA_PARAMETER_ERROR;
    }

    if( rtn == OK )
    {
        size = sizeof(TSXI_RPL_MSG_struct);         /* 以最大的缓冲进行接收 */

        // 根据使用的端口来选择从哪个serv_name地址接收数据
        switch( g_tsxa_server_name_select )
        {
            case   0:
                DN_rtn = DNXA_receive_reply_t(TSXA_MA_ADDR, (void *)p_rpl, size, &act_len, timeout);
                break;
            case   1:
                DN_rtn = DNXA_receive_reply_t(TSXA_MA_ADDR_2, (void *)p_rpl, size, &act_len, timeout);
                break;
            case   2:
                DN_rtn = DNXA_receive_reply_t(TSXA_MA_ADDR_3, (void *)p_rpl, size, &act_len, timeout);
                break;
            case   3:
                DN_rtn = DNXA_receive_reply_t(TSXA_MA_ADDR_4, (void *)p_rpl, size, &act_len, timeout);
                break;
           default:
                DN_rtn = DNXA_receive_reply_t(TSXA_MA_ADDR, (void *)p_rpl, size, &act_len, timeout);
                break;
        }
        
        if( DN_rtn == OK )
        {
            if( p_rpl->func_code == func_code)
            {
                rtn = OK;
            }
            else
            {
                // 错乱了，可能有之前的函数调用没有正常完成，需要清空一下DN通道内容
                // 根据使用的端口来选择从哪个serv_name地址接收数据
                switch( g_tsxa_server_name_select )
                {
                    case   0:
                        DNXA_receive_reply_t(TSXA_MA_ADDR, (void *)p_rpl, size, &act_len, 5);
                        break;
                    case   1:
                        DNXA_receive_reply_t(TSXA_MA_ADDR_2, (void *)p_rpl, size, &act_len, 5);
                        break;
                    case   2:
                        DNXA_receive_reply_t(TSXA_MA_ADDR_3, (void *)p_rpl, size, &act_len, 5);
                        break;
                    case   3:
                        DNXA_receive_reply_t(TSXA_MA_ADDR_4, (void *)p_rpl, size, &act_len, 5);
                        break;
                   default:
                        DNXA_receive_reply_t(TSXA_MA_ADDR, (void *)p_rpl, size, &act_len, 5);
                        break;
                }
                rtn = TSXA_SYSTEM_ERROR;
            }
        }
        else
        {
            rtn = DN_rtn;
        }
    }

    return rtn;
}


int TSXI_snd_req_rec_rpl_msg( TSXI_REQ_MSG_struct *p_req,
                             TSXI_RPL_MSG_struct *p_rpl,
                             TSXI_FUNC_enum func_code,
                             int sendSize,
                             int timeout,
                             BOOL use_MA_2 )
{
    int DN_rtn = 0;
    int i_req_size = 0;
    int i_rpl_size = 0;
    int act_len = 0;
    int rtn = OK;
    int i = 0;
UINT32 tick1 = 0;
UINT32 tick2 = 0;

//tick1 = GetTickCount();


    tsxa_DN_task_init_auto(0);

    if( ( p_req == NULL ) || ( p_rpl == NULL ) )
    {
        rtn = TSXA_PARAMETER_ERROR;
    }

    if( rtn == OK )
    {
        i_req_size = sendSize + 16;     /* + 16头部 */
        i_rpl_size = sizeof(TSXI_RPL_MSG_struct);

        // 连接不上时进行重试
        for( i = 0; i < 4; i++ )
        {
            switch( g_tsxa_server_name_select )
            {
                case   0:
                    DN_rtn = DNXA_send_request_receive_reply_t(TSXA_MA_ADDR, (void *)p_req, i_req_size,
                                    (void *)p_rpl, i_rpl_size, &act_len, 0, timeout);
                    break;
                case   1:
                    DN_rtn = DNXA_send_request_receive_reply_t(TSXA_MA_ADDR_2, (void *)p_req, i_req_size,
                                (void *)p_rpl, i_rpl_size, &act_len, 0, timeout);
                    break;
                case   2:
                    DN_rtn = DNXA_send_request_receive_reply_t(TSXA_MA_ADDR_3, (void *)p_req, i_req_size,
                                    (void *)p_rpl, i_rpl_size, &act_len, 0, timeout);
                    break;
                case   3:
                    DN_rtn = DNXA_send_request_receive_reply_t(TSXA_MA_ADDR_4, (void *)p_req, i_req_size,
                                (void *)p_rpl, i_rpl_size, &act_len, 0, timeout);
                    break;
               default:
                    DN_rtn = DNXA_send_request_receive_reply_t(TSXA_MA_ADDR, (void *)p_req, i_req_size,
                                    (void *)p_rpl, i_rpl_size, &act_len, 0, timeout);
                    g_tsxa_server_name_select = 0;
                    break;
            }

            if( DNXA_SERVER_NOT_LISTENING == DN_rtn )   // 连接不上，尝试更换网络端口重试
            {
                g_tsxa_server_name_select = ( g_tsxa_server_name_select + 1 ) % 4;
                continue;
            }
            else if( DNXA_NOT_INITIALIZED == DN_rtn )   // 提示未注册网络成功，重新强制注册一下
            {   
                tsxa_DN_task_init_auto(1);
            }
            else if( OK == DN_rtn )
            {
                // debug by frank 2021.4.17
    //            printf("g_tsxa_server_name_select = %d\n", g_tsxa_server_name_select);
                break;
            }
        }

        
//tick2 = GetTickCount();

        if( DN_rtn == OK )
        {
            if( p_rpl->func_code == func_code)
            {
                rtn = OK;
            }
            else
            {
                // 错乱了，可能有之前的函数调用没有正常完成，需要清空一下DN通道内容
                TSXI_rec_rpl_msg( p_rpl, func_code, 5, use_MA_2);
                rtn = TSXA_SYSTEM_ERROR;
            }
        }
        else
        {
            rtn = DN_rtn;
        }
    }

//printf("DN send_reply take ticks = %d\n", tick2 - tick1);

    return rtn;
}




/* 后面为外部接口代码 */

// add  2021.3.16
typedef struct
{
    BOOL reached;
    int mover_id;
} tsxa_st_get_mover_id_info_struct;

tsxa_st_get_mover_id_info_struct  g_tsxa_st_get_mover_id[64] = { 0 };
UINT32 g_tsxa_st_get_mover_id_thread_id = 0;        // 获取工位信息的线程id
int g_tsxa_st_get_mover_id_rtn = 0;             // 刷新返回值







/*******************************************************************************
    int TSXA_init_network( void )

函数功能:
    初始化网络功能。多线程方式，以线程为单位调用。
    每一个线程要调用TS/WL等组件的外部接口函数之前，必须要先调用本函数获取网络资源。
输入参数:
    无
输出参数:
    无
输入输出参数:
    无
返回值:
    返回值为0
*******************************************************************************/
DLL_EXPORT int TSXA_init_network( void )
{
    int rtn = OK;

//    DNXA_task_init_t(NULL);

    rtn = tsxa_DN_task_init_auto(0);

    return rtn;
}

/*******************************************************************************
    int TSXA_init_network( void )

函数功能:
    终止网络功能。线程在退出之前调用本函数进行释放网络资源。
输入参数:
    无
输出参数:
    无
输入输出参数:
    无
返回值:
    返回值为0
*******************************************************************************/
DLL_EXPORT int TSXA_term_network( void )
{
    int rtn = OK;

//    DNXA_task_exit_t();

    tsxa_DN_task_exit();

    return rtn;
}


/*******************************************************************************
    int MIO_read_reg
        (
        IN      int     addr,       // 地址
        OUT     UINT32  *value      // 读取回来的值
        )

purpose :

input :
    addr         地址
output :
    value        读取回来的值
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int MIO_read_reg
        (
        IN      int     addr,       // 地址
        OUT     UINT32  *value      // 读取回来的值
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "MIO_read_reg";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = MIO_read_reg_func_code;
    UINT32 data = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (addr = %d )", addr);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.MIO_read_reg_in_arg.addr), (void *)&addr, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_MIO_read_reg_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            data = rpl_msg.rpl_par.MIO_read_reg_out_arg.value;
            if( value != NULL )
            {
                *value = data;
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (value = %d ) = 0x%x", data, rtn);

    return rtn;
}

#if 1

/*******************************************************************************
    int MIO_write_reg
        (
        IN      int     addr,       // 地址
        IN      UINT32  value       // 写入的值
        )

purpose :

input :
    addr         地址
    value        写入的值
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int MIO_write_reg
        (
        IN      int     addr,       // 地址
        IN      UINT32  value       // 写入的值
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "MIO_write_reg";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = MIO_write_reg_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (addr = %d value = %d )", addr, value);


    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.MIO_write_reg_in_arg.addr), (void *)&addr, sizeof(int));
        memcpy((void *)&(req_msg.req_par.MIO_write_reg_in_arg.value), (void *)&value, sizeof(UINT32));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_MIO_write_reg_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}
#endif

/*******************************************************************************
    int MIO_read_reg_longs
        (
        IN      int     addr,           // 开始地址
        OUT     UINT32  *value,         // 读取存放缓存
        IN      int     int32_size      // 32bit的数据个数
        )

purpose :

input :
    addr             开始地址
    int32_size       32bit的数据个数
output :
    value            读取存放缓存
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int MIO_read_reg_longs
        (
        IN      int     addr,           // 开始地址
        OUT     UINT32  *value,         // 读取存放缓存
        IN      int     int32_size      // 32bit的数据个数
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "MIO_read_reg_longs";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = MIO_read_reg_longs_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (addr = %d int32_size = %d )", addr, int32_size);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.MIO_read_reg_longs_in_arg.addr), (void *)&addr, sizeof(int));
        memcpy((void *)&(req_msg.req_par.MIO_read_reg_longs_in_arg.int32_size), (void *)&int32_size, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_MIO_read_reg_longs_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            if( value != NULL )
            {
                memcpy((void *)value, (void *)&rpl_msg.rpl_par.MIO_read_reg_longs_out_arg.value, int32_size * sizeof(UINT32));
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (... ) = 0x%x", rtn);

    return rtn;
}



#if 1
/*******************************************************************************
    int MIO_write_reg_longs
        (
        IN      int     addr,           // 开始地址
        IN      UINT32  *value,         // 存放写入数据内容的缓存
        IN      int     int32_size      // 32bit的数据个数
        )

purpose :

input :
    addr             开始地址
    value            存放写入数据内容的缓存
    int32_size       32bit的数据个数
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int MIO_write_reg_longs
        (
        IN      int     addr,           // 开始地址
        IN      UINT32  *value,         // 存放写入数据内容的缓存
        IN      int     int32_size      // 32bit的数据个数
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "MIO_write_reg_longs";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = MIO_write_reg_longs_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (addr = %d int32_size = %d )", addr, int32_size);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.MIO_write_reg_longs_in_arg.addr), (void *)&addr, sizeof(int));
        memcpy((void *)&(req_msg.req_par.MIO_write_reg_longs_in_arg.value), (void *)&value, sizeof(UINT32));
        memcpy((void *)&(req_msg.req_par.MIO_write_reg_longs_in_arg.int32_size), (void *)&int32_size, int32_size * sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_MIO_write_reg_longs_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< ()");

    return rtn;
}
#endif

/*******************************************************************************
    int TSXA_sys_control_set_bit
        (
        IN      int bit_index       // 要置1的bit  0-31
        )

purpose :

input :
    bit_index        要置1的bit  0-31
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_control_set_bit
        (
        IN      int bit_index       // 要置1的bit  0-31
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_control_set_bit";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_control_set_bit_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (bit_index = %d )", bit_index);

// 2021.3.9  禁止操作一些东西
    if( ( bit_index == 13 ) || (bit_index >17 ) )
    {
        return rtn;
    }


    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_sys_control_set_bit_in_arg.bit_index), (void *)&bit_index, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_control_set_bit_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< ()");

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_control_clr( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_control_clr( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_control_clr";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_control_clr_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_control_clr_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< ()");

    return rtn;
}


/*******************************************************************************
    int TSXA_mover_control_set_bit
        (
        IN      int id,             // 动子id
        IN      int bit_index       // 要置1的bit  0-31
        )

purpose :

input :
    id               动子id
    bit_index        要置1的bit  0-31
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_mover_control_set_bit
        (
        IN      int id,             // 动子id
        IN      int bit_index       // 要置1的bit  0-31
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_mover_control_set_bit";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_mover_control_set_bit_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (id = %d bit_index = %d )", id, bit_index);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_mover_control_set_bit_in_arg.id), (void *)&id, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_mover_control_set_bit_in_arg.bit_index), (void *)&bit_index, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_mover_control_set_bit_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< ()");

    return rtn;
}


/*******************************************************************************
    int TSXA_mover_control_clr
        (
        IN      int id      
        )

purpose :

input :
    id      
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_mover_control_clr
        (
        IN      int id      
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_mover_control_clr";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_mover_control_clr_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (id = %d )", id);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_mover_control_clr_in_arg.id), (void *)&id, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_mover_control_clr_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< ()");

    return rtn;
}



/*******************************************************************************
    int TSXA_sys_initialize( void )

函数功能:
    初始化ITS系统
输入参数:
    无
输出参数:
    无
输入输出参数:
    无
返回值:
    成功后返回值为0，失败后返回值为非0。
*******************************************************************************/
DLL_EXPORT int TSXA_sys_initialize( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_initialize";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_initialize_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_initialize_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_terminate( void )

函数功能:
    终止ITS系统
输入参数:
    无
输出参数:
    无
输入输出参数:
    无
返回值:
    成功后返回值为0，失败后返回值为非0。
*******************************************************************************/
DLL_EXPORT int TSXA_sys_terminate( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_terminate";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_terminate_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_terminate_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_start_work( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_start_work( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_start_work";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_start_work_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_start_work_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_stop_work( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_stop_work( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_stop_work";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_stop_work_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_stop_work_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_pause_work( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_pause_work( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_pause_work";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_pause_work_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_pause_work_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_resume_work( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_resume_work( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_resume_work";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_resume_work_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_resume_work_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_stop( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_stop( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_stop";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_stop_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_stop_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_quick_stop( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_quick_stop( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_quick_stop";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_quick_stop_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_quick_stop_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_reset_err( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_reset_err( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_reset_err";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_reset_err_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_reset_err_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_auto_pos_err_reset_on( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_auto_pos_err_reset_on( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_auto_pos_err_reset_on";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_auto_pos_err_reset_on_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_auto_pos_err_reset_on_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_auto_pos_err_reset_off( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_auto_pos_err_reset_off( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_auto_pos_err_reset_off";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_auto_pos_err_reset_off_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_auto_pos_err_reset_off_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_move_to_next_station_all( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_move_to_next_station_all( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_move_to_next_station_all";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_move_to_next_station_all_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_move_to_next_station_all_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_enable_axis_all( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_enable_axis_all( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_enable_axis_all";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_enable_axis_all_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_enable_axis_all_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_disable_axis_all( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_disable_axis_all( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_disable_axis_all";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_disable_axis_all_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_disable_axis_all_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_load_default_mc( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_load_default_mc( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_load_default_mc";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_load_default_mc_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_load_default_mc_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_save_mc_to_flash( void )

purpose :

input :
    none
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_save_mc_to_flash( void )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_save_mc_to_flash";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_save_mc_to_flash_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_save_mc_to_flash_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_set_mover_offset
        (
        IN      int     axis,       
        IN      double  offset      
        )

purpose :

input :
    axis        
    offset      
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_set_mover_offset
        (
        IN      int     axis,       
        IN      double  offset      
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_set_mover_offset";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_set_mover_offset_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d offset = %g )", axis, offset);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_sys_set_mover_offset_in_arg.axis), (void *)&axis, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_sys_set_mover_offset_in_arg.offset), (void *)&offset, sizeof(double));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_set_mover_offset_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_get_mover_offset
        (
        IN      int     axis,       
        OUT      double  *offset     
        )

purpose :

input :
    axis        
    offset      
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_get_mover_offset
        (
        IN      int     axis,       
        OUT      double  *offset     
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_get_mover_offset";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_get_mover_offset_func_code;
    double offset_val = 0.0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d)", axis);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_sys_get_mover_offset_in_arg.axis), (void *)&axis, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_get_mover_offset_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
            offset_val = rpl_msg.rpl_par.TSXA_sys_get_mover_offset_out_arg.offset;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    if( offset != NULL )
    {
        *offset = offset_val;
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (offset = %g) = 0x%x", offset_val, rtn);

    return rtn;
}




/*******************************************************************************
    int TSXA_sys_get_status
        (
        OUT     UINT32  *sys_status,        // 系统状态码
        OUT     UINT32  *sys_errno          // 系统错误码
        )

purpose :

input :
    none
output :
    sys_status           系统状态码
    sys_errno            系统错误码
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_get_status
        (
        OUT     UINT32  *sys_status,        // 系统状态码
        OUT     UINT32  *sys_errno,          // 系统错误码
        OUT     UINT32 *sys_errinfo         // 系统信息码
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_get_status";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_get_status_func_code;
    UINT32 status = 0;
    UINT32 errno_val = 0;
    UINT32 errinfo = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_get_status_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            status = rpl_msg.rpl_par.TSXA_sys_get_status_out_arg.sys_status;
            errno_val = rpl_msg.rpl_par.TSXA_sys_get_status_out_arg.sys_errno;
            errinfo = rpl_msg.rpl_par.TSXA_sys_get_status_out_arg.sys_errinfo;
            if( sys_status != NULL )
            {
                *sys_status = status;
            }
            if( sys_errno != NULL )
            {
                *sys_errno = errno_val;
            }
            if( sys_errinfo != NULL )
            {
                *sys_errinfo = errinfo;
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (sys_status = 0x%x sys_errno = 0x%x sys_errinfo = 0x%x )", 
        status, errno_val, errinfo);

    return rtn;
}


/*******************************************************************************
    int TSXA_sys_get_mover_num
        (
        OUT     int *mover_num,         // 动子个数
        OUT     int *station_num        // 工位个数
        )

purpose :

input :
    none
output :
    mover_num            动子个数
    station_num          工位个数
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_sys_get_mover_num
        (
        OUT     int *mover_num,         // 动子个数
        OUT     int *station_num        // 工位个数
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_sys_get_mover_num";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_sys_get_mover_num_func_code;
    int mover = 0;
    int station = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_sys_get_mover_num_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            mover = rpl_msg.rpl_par.TSXA_sys_get_mover_num_out_arg.mover_num;
            station = rpl_msg.rpl_par.TSXA_sys_get_mover_num_out_arg.station_num;
            if( mover_num != NULL )
            {
                *mover_num = mover;
            }
            if( station_num != NULL )
            {
                *station_num = station;
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (mover_num = %d station_num = %d )", mover, station);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_set_station_para
        (
        IN      int                             id,         // 工位id
        IN      TSXA_SYS_STATION_para_struct    para        // 工位参数
        )

purpose :

input :
    id           工位id
    para         工位参数
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_set_station_para
        (
        IN      int                        id,         // 工位id
        IN      TSXA_SYS_STATION_para_struct    para        // 工位参数
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_set_station_para";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_set_station_para_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ( id = %d )", id);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_set_station_para_in_arg.id), (void *)&id, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_st_set_station_para_in_arg.para), (void *)&para, sizeof(TSXA_SYS_STATION_para_struct));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_set_station_para_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_move_next_station
        (
        IN      int station_id      // 工位id
        )

purpose :

input :
    station_id       工位id
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_move_next_station
        (
        IN      int station_id      // 工位id
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_move_next_station";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_move_next_station_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (station_id = %d )", station_id);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_move_next_station_in_arg.st_id), (void *)&station_id, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_move_next_station_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}



/*******************************************************************************
    int TSXA_st_move_next_station_multi
        (
        IN      UINT32  station_list,           // 0-31工位id列表，每个bit对应一个工位
        IN      UINT32  station_list_32_63      // 32-63工位id列表，每个bit对应一个工位
        )

purpose :

input :
    station_list             0-31工位id列表，每个bit对应一个工位
    station_list_32_63       32-63工位id列表，每个bit对应一个工位
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_move_next_station_multi
        (
        IN      UINT32  station_list,           // 0-31工位id列表，每个bit对应一个工位
        IN      UINT32  station_list_32_63      // 32-63工位id列表，每个bit对应一个工位
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_move_next_station_multi";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_move_next_station_multi_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (station_list = 0x%x station_list_32_63 = 0x%x )", station_list, station_list_32_63);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_move_next_station_multi_in_arg.station_list), (void *)&station_list, sizeof(UINT32));
        memcpy((void *)&(req_msg.req_par.TSXA_st_move_next_station_multi_in_arg.station_list_32_63), (void *)&station_list_32_63, sizeof(UINT32));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_move_next_station_multi_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_qstop
        (
        IN      int station     // 工位id
        )

purpose :

input :
    station      工位id
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_qstop
        (
        IN      int station     // 工位id
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_qstop";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_qstop_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (station = %d )", station);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_qstop_in_arg.station_id), (void *)&station, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_qstop_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_qstop_resume
        (
        IN      int station     
        )

purpose :

input :
    station     
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_qstop_resume
        (
        IN      int station     
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_qstop_resume";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_qstop_resume_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (station = %d )", station);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_qstop_resume_in_arg.station_id), (void *)&station, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_qstop_resume_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_enable
        (
        IN      int station_id      
        )

purpose :

input :
    station_id      
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_enable
        (
        IN      int station_id      
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_enable";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_enable_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (station_id = %d )", station_id);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_enable_in_arg.station_id), (void *)&station_id, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_enable_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_disable
        (
        IN      int station_id      
        )

purpose :

input :
    station_id      
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_disable
        (
        IN      int station_id      
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_disable";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_disable_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (station_id = %d )", station_id);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_disable_in_arg.station_id), (void *)&station_id, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_disable_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_get_mover_id
        (
        IN      int     st_id,          // 工位id
        OUT     BOOL    *reached,       // 是否有动子到达  
        OUT     int     *mover_id       // 返回的动子id
        )

purpose :

input :
    st_id            工位id
output :
    reached          是否有动子到达  
    mover_id         返回的动子id
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_get_mover_id
        (
        IN      int     st_id,          // 工位id
        OUT     BOOL    *reached,       // 是否有动子到达  
        OUT     int     *mover_id       // 返回的动子id
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_get_mover_id";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_get_mover_id_func_code;
    BOOL reached_val = FALSE;
    int mover_id_val = 252;
    BOOL get_from_thread = FALSE;
	BOOL st_reached = FALSE;
	int  axis_id = 252;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (st_id = %d )", st_id);

#if 0

// 采用专门的线程进行刷新工位信息   2021.3.16 frank
if( g_tsxa_st_get_mover_id_thread_id == 0 )
{
    tsxa_st_get_mover_id_all_start();
    get_from_thread = FALSE;
}
else
{
    get_from_thread = TRUE;

    if( ( st_id >= 0 ) && ( st_id < 64 ) )
    {
		st_reached = g_tsxa_st_get_mover_id[st_id].reached;
		axis_id = g_tsxa_st_get_mover_id[st_id].mover_id;
		if( !st_reached )
		{
			axis_id = 252;
		}
        if( reached != NULL )
        {
            *reached = st_reached;
        }
        if( mover_id != NULL )
        {
            *mover_id = axis_id;
        }
        
        rtn = g_tsxa_st_get_mover_id_rtn;
    }
    else
    {
        rtn = TSXA_PARAMETER_ERROR;
    }
}

if( !get_from_thread )  
#endif
{
    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_get_mover_id_in_arg.st_id), (void *)&st_id, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_get_mover_id_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            reached_val = rpl_msg.rpl_par.TSXA_st_get_mover_id_out_arg.reached;
            mover_id_val = rpl_msg.rpl_par.TSXA_st_get_mover_id_out_arg.mover_id;
            if( reached != NULL )
            {
                *reached = reached_val;
            }
            if( mover_id != NULL )
            {
                *mover_id = mover_id_val;

				if( !reached_val )
				{
					*mover_id = 252;
				}
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }
}

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< ( reached = %d mover_id = %d )", reached_val, mover_id_val);

//	Sleep(10);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_enable
        (
        IN      int axis        // 动子id
        )

purpose :

input :
    axis         动子id
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_enable
        (
        IN      int axis        // 动子id
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_enable";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_enable_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d )", axis);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_enable_in_arg.axis), (void *)&axis, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_enable_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_disable
        (
        IN      int axis        // 动子id
        )

purpose :

input :
    axis         动子id
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_disable
        (
        IN      int axis        // 动子id
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_disable";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_disable_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d )", axis);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_disable_in_arg.axis), (void *)&axis, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_disable_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_move_abs
        (
        IN      int     axis,       // 动子id
        IN      double  pos,        // 目标位置
        IN      double  vel,        // 速度
        IN      double  acc,        // 加速度
        IN      double  dec         // 减速度
        )

purpose :

input :
    axis         动子id
    pos          目标位置
    vel          速度
    acc          加速度
    dec          减速度
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_move_abs
        (
        IN      int     axis,       // 动子id
        IN      double  pos,        // 目标位置
        IN      double  vel,        // 速度
        IN      double  acc,        // 加速度
        IN      double  dec         // 减速度
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_move_abs";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_move_abs_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d pos = %g vel = %g acc = %g dec = %g )", axis, pos, vel, acc, dec);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_abs_in_arg.axis), (void *)&axis, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_abs_in_arg.pos), (void *)&pos, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_abs_in_arg.vel), (void *)&vel, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_abs_in_arg.acc), (void *)&acc, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_abs_in_arg.dec), (void *)&dec, sizeof(double));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_move_abs_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_limit_move_abs
        (
        IN      int     axis,           // 动子id
        IN      double  pos,            // 目标位置
        IN      double  max_offset,     // 最大的偏移范围
        IN      double  vel             // 最大速度，0使用默认参数
        )

purpose :

input :
    axis             动子id
    pos              目标位置
    max_offset       最大的偏移范围
    vel              最大速度，0使用默认参数
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_limit_move_abs
        (
        IN      int     axis,           // 动子id
        IN      double  pos,            // 目标位置
        IN      double  max_offset,     // 最大的偏移范围
        IN      double  vel             // 最大速度，0使用默认参数
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_limit_move_abs";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_limit_move_abs_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d pos = %g max_offset = %g vel = %g )", axis, pos, max_offset, vel);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_limit_move_abs_in_arg.axis), (void *)&axis, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_limit_move_abs_in_arg.pos), (void *)&pos, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_limit_move_abs_in_arg.max_offset), (void *)&max_offset, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_limit_move_abs_in_arg.vel), (void *)&vel, sizeof(double));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_limit_move_abs_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}




DLL_EXPORT int TSXA_axis_limit_move_abs_2
        (
        IN      int     axis,           // 动子id
        IN      double  pos,            // 目标位置
        IN      double  max_offset,     // 最大的偏移范围
        IN      double  vel,             // 最大速度，0使用默认参数
        IN      double  acc,
        IN      double  dec
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_limit_move_abs_2";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_limit_move_abs_2_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d pos = %g max_offset = %g vel = %g acc = %g dec = %g )", axis, pos, max_offset, vel, acc, dec);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_limit_move_abs_2_in_arg.axis), (void *)&axis, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_limit_move_abs_2_in_arg.pos), (void *)&pos, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_limit_move_abs_2_in_arg.max_offset), (void *)&max_offset, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_limit_move_abs_2_in_arg.vel), (void *)&vel, sizeof(double));
		
		req_msg.req_par.TSXA_axis_limit_move_abs_2_in_arg.acc = acc;
		req_msg.req_par.TSXA_axis_limit_move_abs_2_in_arg.dec = dec;



        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_limit_move_abs_2_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}




/*******************************************************************************
    int TSXA_axis_move_rel
        (
        IN      int     axis,       // 动子id
        IN      double  pos,        // 相对运动位置量
        IN      double  vel,        // 速度
        IN      double  acc,        // 加速度
        IN      double  dec         // 减速度
        )

purpose :

input :
    axis         动子id
    pos          相对运动位置量
    vel          速度
    acc          加速度
    dec          减速度
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_move_rel
        (
        IN      int    axis,       // 动子id
        IN      double  pos,        // 相对运动位置量
        IN      double  vel,        // 速度
        IN      double  acc,        // 加速度
        IN      double  dec         // 减速度
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_move_rel";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_move_rel_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ( axis = %d pos = %g vel = %g acc = %g dec = %g )", axis, pos, vel, acc, dec);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_in_arg.axis), (void *)&axis, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_in_arg.pos), (void *)&pos, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_in_arg.vel), (void *)&vel, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_in_arg.acc), (void *)&acc, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_in_arg.dec), (void *)&dec, sizeof(double));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_move_rel_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_quick_stop
        (
        IN      int axis        // 动子id
        )

purpose :

input :
    axis         动子id
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_quick_stop
        (
        IN      int axis        // 动子id
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_quick_stop";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_quick_stop_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d )", axis);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_quick_stop_in_arg.axis), (void *)&axis, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_quick_stop_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_stop
        (
        IN      int axis        // 动子id
        )

purpose :

input :
    axis         动子id
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_stop
        (
        IN      int axis        // 动子id
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_stop";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_stop_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d )", axis);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_stop_in_arg.axis), (void *)&axis, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_stop_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_reset
        (
        IN      int axis        // 动子id
        )

purpose :

input :
    axis         动子id
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_reset
        (
        IN      int axis        // 动子id
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_reset";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_reset_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d )", axis);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_reset_in_arg.axis), (void *)&axis, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_reset_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_move_vel
        (
        IN      int     axis,           // 动子id
        IN      BOOL    forward,        // 是否正方向
        IN      double  vel,            // 速度
        IN      double  acc             // 加速度
        )

purpose :

input :
    axis             动子id
    forward          是否正方向
    vel              速度
    acc              加速度
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_move_vel
        (
        IN      int     axis,           // 动子id
        IN      BOOL    forward,        // 是否正方向
        IN      double  vel,            // 速度
        IN      double  acc             // 加速度
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_move_vel";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_move_vel_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d forward = %d vel = %g acc = %g )", axis, forward, vel, acc);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_vel_in_arg.axis), (void *)&axis, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_vel_in_arg.forward), (void *)&forward, sizeof(BOOL));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_vel_in_arg.vel), (void *)&vel, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_vel_in_arg.acc), (void *)&acc, sizeof(double));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_move_vel_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_change_vel
        (
        IN      int     axis,       // 动子id
        IN      double  vel         // 新的速度
        )

purpose :

input :
    axis         动子id
    vel          新的速度
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_change_vel
        (
        IN      int     axis,       // 动子id
        IN      double  vel         // 新的速度
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_change_vel";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_change_vel_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d vel = %g )", axis, vel);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_change_vel_in_arg.axis), (void *)&axis, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_change_vel_in_arg.vel), (void *)&vel, sizeof(double));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_change_vel_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_move_abs_g
        (
        IN      int     num,            // 需要运动的动子个数
        IN      int     *axis_list,     // 动子列表
        IN      double  *pos_list,      // 各个动子的目标位置
        IN      double  *vel_list,      // 速度列表, 0表示使用原来的值
        IN      double  *acc_list,      // 加速列表, 0表示使用原来的值
        IN      double  *dec_list       
        )

purpose :

input :
    num              需要运动的动子个数
    axis_list        动子列表
    pos_list         各个动子的目标位置
    vel_list         速度列表, 0表示使用原来的值
    acc_list         加速列表, 0表示使用原来的值
    dec_list        
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_move_abs_g
        (
        IN      int     num,            // 需要运动的动子个数
        IN      int     *axis_list,     // 动子列表
        IN      double  *pos_list,      // 各个动子的目标位置
        IN      double  *vel_list,      // 速度列表, 0表示使用原来的值
        IN      double  *acc_list,      // 加速列表, 0表示使用原来的值
        IN      double  *dec_list       
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_move_abs_g";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_move_abs_g_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (num = %d )", num);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_abs_g_in_arg.num), (void *)&num, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_abs_g_in_arg.axis_list), (void *)&axis_list, num * sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_abs_g_in_arg.pos_list), (void *)&pos_list, num * sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_abs_g_in_arg.vel_list), (void *)&vel_list, num * sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_abs_g_in_arg.acc_list), (void *)&acc_list, num * sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_abs_g_in_arg.dec_list), (void *)&dec_list, num * sizeof(double));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_move_abs_g_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_move_rel_g
        (
        IN      int     num,            // 需要运动的动子个数
        IN      int     *axis_list,     // 动子列表
        IN      double  *pos_list,      // 各个动子的相对运动偏移值
        IN      double  *vel_list,      // 速度列表, 0表示使用原来的值
        IN      double  *acc_list,      // 加速列表, 0表示使用原来的值
        IN      double  *dec_list       
        )

purpose :

input :
    num              需要运动的动子个数
    axis_list        动子列表
    pos_list         各个动子的相对运动偏移值
    vel_list         速度列表, 0表示使用原来的值
    acc_list         加速列表, 0表示使用原来的值
    dec_list        
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_move_rel_g
        (
        IN      int     num,            // 需要运动的动子个数
        IN      int     *axis_list,     // 动子列表
        IN      double  *pos_list,      // 各个动子的相对运动偏移值
        IN      double  *vel_list,      // 速度列表, 0表示使用原来的值
        IN      double  *acc_list,      // 加速列表, 0表示使用原来的值
        IN      double  *dec_list       
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_move_rel_g";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_move_rel_g_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (num = %d )", num);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_g_in_arg.num), (void *)&num, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_g_in_arg.axis_list), (void *)&axis_list, num * sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_g_in_arg.pos_list), (void *)&pos_list, num * sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_g_in_arg.vel_list), (void *)&vel_list, num * sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_g_in_arg.acc_list), (void *)&acc_list, num * sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_g_in_arg.dec_list), (void *)&dec_list, num * sizeof(double));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_move_rel_g_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_move_rel_all
        (
        IN      int     num,            // 所有动子个数
        IN      double  pos_rel,        // 所有动子的相对运动偏移值
        IN      double  vel,            // 速度, 0表示使用原来的值
        IN      double  acc,            // 加速度, 0表示使用原来的值
        IN      double  dec             
        )

purpose :

input :
    num              所有动子个数
    pos_rel          所有动子的相对运动偏移值
    vel              速度, 0表示使用原来的值
    acc              加速度, 0表示使用原来的值
    dec             
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_move_rel_all
        (
        IN      int     num,            // 所有动子个数
        IN      double  pos_rel,        // 所有动子的相对运动偏移值
        IN      double  vel,            // 速度, 0表示使用原来的值
        IN      double  acc,            // 加速度, 0表示使用原来的值
        IN      double  dec             
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_move_rel_all";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_move_rel_all_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (num = %d pos_rel = %g vel = %g acc = %g dec = %g )", num, pos_rel, vel, acc, dec);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_all_in_arg.num), (void *)&num, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_all_in_arg.pos_rel), (void *)&pos_rel, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_all_in_arg.vel), (void *)&vel, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_all_in_arg.acc), (void *)&acc, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_move_rel_all_in_arg.dec), (void *)&dec, sizeof(double));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_move_rel_all_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_get_status
        (
        IN      int     axis,               // 动子id
        OUT     UINT16  *mover_status,      // 动子状态字
        OUT     double  *act_pos,           // 位置
        OUT     double  *act_vel            // 速度
        )

purpose :

input :
    axis                 动子id
output :
    mover_status         动子状态字
    act_pos              位置
    act_vel              速度
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_get_status
        (
        IN      int     axis,               // 动子id
        OUT     UINT16  *mover_status,      // 动子状态字
        OUT     double  *act_pos,           // 位置
        OUT     double  *act_vel            // 速度
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_get_status";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_get_status_func_code;
    UINT16 status = 0;
    double pos = 0.0;
    double vel = 0.0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d )", axis);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_get_status_in_arg.axis), (void *)&axis, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_get_status_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            status = rpl_msg.rpl_par.TSXA_axis_get_status_out_arg.mover_status;
            pos = rpl_msg.rpl_par.TSXA_axis_get_status_out_arg.act_pos;
            vel = rpl_msg.rpl_par.TSXA_axis_get_status_out_arg.act_vel;
            if( mover_status != NULL )
            {
                *mover_status = status;
            }
            if( act_pos != NULL )
            {
                *act_pos = pos;
            }
            if( act_vel != NULL )
            {
                *act_vel = vel;
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (mover_status = %x act_pos = %g act_vel = %g ) = 0x%x", status, pos, vel, rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_get_status_g
        (
        IN      int     mover_num,              // 动子个数
        IN      int     *axis_list,             // 动子列表
        OUT     UINT16  *mover_status_list,     // 动子状态字
        OUT     double  *act_vel_list,          // 速度列表
        OUT     double  *act_pos_list           // 位置列表
        )

purpose :

input :
    mover_num                动子个数
    axis_list                动子列表
output :
    mover_status_list        动子状态字
    act_vel_list             速度列表
    act_pos_list             位置列表
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_get_status_g
        (
        IN      int     mover_num,              // 动子个数
        IN      int     *axis_list,             // 动子列表
        OUT     UINT16  *mover_status_list,     // 动子状态字
        OUT     double  *act_vel_list,          // 速度列表
        OUT     double  *act_pos_list           // 位置列表
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_get_status_g";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_get_status_g_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (mover_num = %d )", mover_num);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_get_status_g_in_arg.mover_num), (void *)&mover_num, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_get_status_g_in_arg.axis_list), (void *)&axis_list, mover_num * sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_get_status_g_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            if( mover_status_list != NULL )
            {
                memcpy((void *)mover_status_list, (void *)&rpl_msg.rpl_par.TSXA_axis_get_status_g_out_arg.mover_status_list, mover_num * sizeof(UINT16));
            }
            if( act_vel_list != NULL )
            {
                memcpy((void *)act_vel_list, (void *)&rpl_msg.rpl_par.TSXA_axis_get_status_g_out_arg.act_vel_list, mover_num * sizeof(double));
            }
            if( act_pos_list != NULL )
            {
                memcpy((void *)act_pos_list, (void *)&rpl_msg.rpl_par.TSXA_axis_get_status_g_out_arg.act_pos_list, mover_num * sizeof(double));
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_wait_move_end
        (
        IN      int axis,       // 动子id
        IN      int timeout     
        )

purpose :

input :
    axis         动子id
    timeout     
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_wait_move_end
        (
        IN      int axis,       // 动子id
        IN      int timeout     
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_wait_move_end";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_wait_move_end_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d timeout = %d )", axis, timeout);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_wait_move_end_in_arg.axis), (void *)&axis, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_wait_move_end_in_arg.timeout), (void *)&timeout, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_wait_move_end_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_wait_move_end_g
        (
        IN      int num,            // 动子个数
        IN      int *axis_list,     // 动子id
        IN      int timeout         
        )

purpose :

input :
    num              动子个数
    axis_list        动子id
    timeout         
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_wait_move_end_g
        (
        IN      int num,            // 动子个数
        IN      int *axis_list,     // 动子id
        IN      int timeout         
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_wait_move_end_g";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_wait_move_end_g_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (num = %d timeout = %d )", num, timeout);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_wait_move_end_g_in_arg.num), (void *)&num, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_wait_move_end_g_in_arg.axis_list), (void *)&axis_list, num * sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_axis_wait_move_end_g_in_arg.timeout), (void *)&timeout, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_wait_move_end_g_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_get_mover_pos
        (
        IN      int     axis,       // 动子id
        OUT     double  *pos,       // 位置
        OUT     double  *vel        // 速度
        )

purpose :

input :
    axis         动子id
output :
    pos          位置
    vel          速度
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_get_mover_pos
        (
        IN      int     axis,       // 动子id
        OUT     double  *pos,       // 位置
        OUT     double  *vel        // 速度
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_get_mover_pos";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_get_mover_pos_func_code;
    double pos_val = 0.0;
    double vel_val = 0.0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d )", axis);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_get_mover_pos_in_arg.axis), (void *)&axis, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_get_mover_pos_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            pos_val = rpl_msg.rpl_par.TSXA_get_mover_pos_out_arg.pos;
            vel_val = rpl_msg.rpl_par.TSXA_get_mover_pos_out_arg.vel;
            if( pos != NULL )
            {
                *pos = pos_val;
            }
            if( vel != NULL )
            {
                *vel = vel_val;
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (pos = %g vel = %g) = 0x%x", pos_val, vel_val, rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_get_mover_pos_group
        (
        IN      int     num,            // 需要获取的动子个数
        IN      int     *axis_list,     // 动子列表
        OUT     double  *pos_list       // 位置列表
        )

purpose :

input :
    num              需要获取的动子个数
    axis_list        动子列表
output :
    pos_list         位置列表
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_get_mover_pos_group
        (
        IN      int     num,            // 需要获取的动子个数
        IN      int     *axis_list,     // 动子列表
        OUT     double  *pos_list       // 位置列表
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_get_mover_pos_group";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_get_mover_pos_group_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (num = %d)", num);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_get_mover_pos_group_in_arg.num), (void *)&num, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_get_mover_pos_group_in_arg.axis_list), (void *)&axis_list, num * sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_get_mover_pos_group_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            if( pos_list != NULL )
            {
                memcpy((void *)pos_list, (void *)&rpl_msg.rpl_par.TSXA_get_mover_pos_group_out_arg.pos_list, num * sizeof(double));
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_set_motion_parameter
        (
        IN      int     axis,       // 动子id
        IN      double  vel,        // 速度
        IN      double  acc,        // 加速度
        IN      double  dec         // 减速度
        )

purpose :

input :
    axis         动子id
    vel          速度
    acc          加速度
    dec          减速度
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_set_motion_parameter
        (
        IN      int     axis,       // 动子id
        IN      double  vel,        // 速度
        IN      double  acc,        // 加速度
        IN      double  dec         // 减速度
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_set_motion_parameter";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_set_motion_parameter_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d vel = %g acc = %g dec = %g)", axis, vel, acc, dec);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_set_motion_parameter_in_arg.axis), (void *)&axis, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_set_motion_parameter_in_arg.vel), (void *)&vel, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_set_motion_parameter_in_arg.acc), (void *)&acc, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_set_motion_parameter_in_arg.dec), (void *)&dec, sizeof(double));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_set_motion_parameter_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_get_motion_parameter
        (
        IN      int     axis,       // 动子id
        OUT     double  *vel,       // 速度
        OUT     double  *acc,       // 加速度
        OUT     double  *dec        // 减速度
        )

purpose :

input :
    axis         动子id
output :
    vel          速度
    acc          加速度
    dec          减速度
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_get_motion_parameter
        (
        IN      int     axis,       // 动子id
        OUT     double  *vel,       // 速度
        OUT     double  *acc,       // 加速度
        OUT     double  *dec        // 减速度
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_get_motion_parameter";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_get_motion_parameter_func_code;
    double vel_val = 0.0;
    double acc_val = 0.0;
    double dec_val = 0.0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (axis = %d )", axis);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_get_motion_parameter_in_arg.axis), (void *)&axis, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_get_motion_parameter_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            vel_val = rpl_msg.rpl_par.TSXA_get_motion_parameter_out_arg.vel;
            acc_val = rpl_msg.rpl_par.TSXA_get_motion_parameter_out_arg.acc;
            dec_val = rpl_msg.rpl_par.TSXA_get_motion_parameter_out_arg.dec;
            if( vel != NULL )
            {
                *vel = vel_val;
            }
            if( acc != NULL )
            {
                *acc = acc_val;
            }
            if( dec != NULL )
            {
                *dec = dec_val;
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (vel = %g acc = %g dec = %g )", vel_val, acc_val, dec_val);

    return rtn;
}


/*******************************************************************************
    int TSXA_set_global_motion_parameter
        (
        IN      double  vel,        // 全局速度
        IN      double  acc,        // 全局加速度
        IN      double  dec         // 全局减速度
        )

purpose :

input :
    vel          全局速度
    acc          全局加速度
    dec          全局减速度
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_set_global_motion_parameter
        (
        IN      double  vel,        // 全局速度
        IN      double  acc,        // 全局加速度
        IN      double  dec         // 全局减速度
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_set_global_motion_parameter";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_set_global_motion_parameter_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (vel = %g acc = %g dec = %g )", vel, acc, dec);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_set_global_motion_parameter_in_arg.vel), (void *)&vel, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_set_global_motion_parameter_in_arg.acc), (void *)&acc, sizeof(double));
        memcpy((void *)&(req_msg.req_par.TSXA_set_global_motion_parameter_in_arg.dec), (void *)&dec, sizeof(double));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_set_global_motion_parameter_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_get_global_motion_parameter
        (
        OUT      double  *vel,                   // 速度
        OUT      double  *acc,                   // 加速度
        OUT      double  *dec,                   // 减速度
        OUT      double  *quick_stop_acc,        // 急停减速度
        OUT      double  *jerk                   // 加加速度
        )

purpose :

input :
    vel                      速度
    acc                      加速度
    dec                      减速度
    quick_stop_acc           急停减速度
    jerk                     加加速度
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_get_global_motion_parameter
        (
        OUT      double  *vel,                   // 速度
        OUT      double  *acc,                   // 加速度
        OUT      double  *dec,                   // 减速度
        OUT      double  *quick_stop_acc,        // 急停减速度
        OUT      double  *jerk                   // 加加速度
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_get_global_motion_parameter";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_get_global_motion_parameter_func_code;
    double vel_val = 0.0;
    double acc_val = 0.0;
    double dec_val = 0.0;
    double quick_stop_acc_val = 0.0;
    double jerk_val = 0.0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;


        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_get_global_motion_parameter_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            vel_val = rpl_msg.rpl_par.TSXA_get_global_motion_parameter_out_arg.vel;
            acc_val = rpl_msg.rpl_par.TSXA_get_global_motion_parameter_out_arg.acc;
            dec_val = rpl_msg.rpl_par.TSXA_get_global_motion_parameter_out_arg.dec;
            quick_stop_acc_val = rpl_msg.rpl_par.TSXA_get_global_motion_parameter_out_arg.quick_stop_acc;
            jerk_val = rpl_msg.rpl_par.TSXA_get_global_motion_parameter_out_arg.jerk;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    if( vel != NULL )
    {
        *vel = vel_val;
    }

    if( acc != NULL )
    {
        *acc = acc_val;
    }

    if( dec != NULL )
    {
        *dec = dec_val;
    }

    if( quick_stop_acc != NULL )
    {
        *quick_stop_acc = quick_stop_acc_val;
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_disable_all
        (
        IN      int num     // 所有动子个数
        )

purpose :

input :
    num      所有动子个数
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_disable_all
        (
        IN      int num     // 所有动子个数
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_disable_all";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_disable_all_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (num = %d )", num);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_disable_all_in_arg.num), (void *)&num, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_disable_all_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_axis_enable_all
        (
        IN      int num     // 所有动子个数
        )

purpose :

input :
    num      所有动子个数
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_axis_enable_all
        (
        IN      int num     // 所有动子个数
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_axis_enable_all";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_axis_enable_all_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (num = %d )", num);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_axis_enable_all_in_arg.num), (void *)&num, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_axis_enable_all_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_get_all_mover_id
        (
        OUT     int *st_reached_num,                // 工位上有动子到达的工位个数
        OUT     int st_reached_id_list[32],         // 有动子到达的工位编号列表
        OUT     int reaced_mover_id_list[32]        // 到达相应工位的动子编号
        )

purpose :

input :
    none
output :
    st_reached_num                   工位上有动子到达的工位个数
    st_reached_id_list               有动子到达的工位编号列表
    reaced_mover_id_list             到达相应工位的动子编号
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_get_all_mover_id
        (
        OUT     int *st_reached_num,                // 工位上有动子到达的工位个数
        OUT     int st_reached_id_list[32],         // 有动子到达的工位编号列表
        OUT     int reaced_mover_id_list[32]        // 到达相应工位的动子编号
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_get_all_mover_id";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_get_all_mover_id_func_code;
    int num = 0;
    int i = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_get_all_mover_id_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            num = rpl_msg.rpl_par.TSXA_st_get_all_mover_id_out_arg.st_reached_num;
            if( st_reached_num != NULL )
            {
                *st_reached_num = num;
            }
            if( st_reached_id_list != NULL )
            {
                for( i = 0; i < num; i++ )
                {
                    st_reached_id_list[i] = rpl_msg.rpl_par.TSXA_st_get_all_mover_id_out_arg.st_reached_id_list[i];
                }
            }
            if( reaced_mover_id_list != NULL )
            {
                for( i = 0; i < num; i++ )
                {
                    reaced_mover_id_list[i] = rpl_msg.rpl_par.TSXA_st_get_all_mover_id_out_arg.reaced_mover_id_list[i];
                }
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (st_reached_num = %d) = 0x%x", num, rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_get_all_mover_id_32
        (
        OUT     int *st_reached_num,                // 工位上有动子到达的工位个数
        OUT     int st_reached_id_list[32],         // 有动子到达的工位编号列表
        OUT     int reaced_mover_id_list[32]        // 到达相应工位的动子编号
        )

purpose :

input :
    none
output :
    st_reached_num                   工位上有动子到达的工位个数
    st_reached_id_list               有动子到达的工位编号列表
    reaced_mover_id_list             到达相应工位的动子编号
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_get_all_mover_id_32
        (
        OUT     int *st_reached_num,                // 工位上有动子到达的工位个数
        OUT     int st_reached_id_list[32],         // 有动子到达的工位编号列表
        OUT     int reaced_mover_id_list[32]        // 到达相应工位的动子编号
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_get_all_mover_id_32";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_get_all_mover_id_32_func_code;
    int num = 0;
    int i = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_get_all_mover_id_32_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            num = rpl_msg.rpl_par.TSXA_st_get_all_mover_id_32_out_arg.st_reached_num;
            if( st_reached_num != NULL )
            {
                *st_reached_num = num;
            }
            if( st_reached_id_list != NULL )
            {
                for( i = 0; i < num; i++ )
                {
                    st_reached_id_list[i] = rpl_msg.rpl_par.TSXA_st_get_all_mover_id_32_out_arg.st_reached_id_list[i];
                }
            }
            if( reaced_mover_id_list != NULL )
            {
                for( i = 0; i < num; i++ )
                {
                    reaced_mover_id_list[i] = rpl_msg.rpl_par.TSXA_st_get_all_mover_id_32_out_arg.reaced_mover_id_list[i];
                }
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (st_reached_num = %d) = 0x%x", num, rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_get_occupy
        (
        IN      int     st_id,      // 工位id
        OUT     BOOL    *has        // 是否有动子在工位范围内   1 - 有动子在工位范围内  0 - 没有
        )

purpose :

input :
    st_id        工位id
output :
    has          是否有动子在工位范围内   1 - 有动子在工位范围内  0 - 没有
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_get_occupy
        (
        IN      int     st_id,      // 工位id
        OUT     BOOL    *has        // 是否有动子在工位范围内   1 - 有动子在工位范围内  0 - 没有
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_get_occupy";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_get_occupy_func_code;
    BOOL has_val = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (st_id = %d )", st_id);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_get_occupy_in_arg.st_id), (void *)&st_id, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_get_occupy_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            has_val = rpl_msg.rpl_par.TSXA_st_get_occupy_out_arg.has;
            if( has != NULL )
            {
                *has = has_val;
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (has = %d )", has_val);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_set_allow_entering
        (
        IN      int     st_id,      // 工位id
        IN      BOOL    allow       // 是否允许动子进入本工位， 1 - 允许  0 - 禁止
        )

purpose :

input :
    st_id        工位id
    allow        是否允许动子进入本工位， 1 - 允许  0 - 禁止
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_set_allow_entering
        (
        IN      int     st_id,      // 工位id
        IN      BOOL    allow       // 是否允许动子进入本工位， 1 - 允许  0 - 禁止
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_set_allow_entering";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_set_allow_entering_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (st_id = %d allow = %d )", st_id, allow);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_set_allow_entering_in_arg.st_id), (void *)&st_id, sizeof(int));
        memcpy((void *)&(req_msg.req_par.TSXA_st_set_allow_entering_in_arg.allow), (void *)&allow, sizeof(BOOL));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_set_allow_entering_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_get_sys_state
        (
        OUT     BOOL    *inited,        // iTS系统是否已经初始化   1 - 已初始化  0 - 未初始化
        OUT     BOOL    *autoworked     // 工站自动运行是否已经启动    1 - 已正常启动   0 - 未启动
        )

purpose :

input :
    none
output :
    inited           iTS系统是否已经初始化   1 - 已初始化  0 - 未初始化
    autoworked       工站自动运行是否已经启动    1 - 已正常启动   0 - 未启动
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_get_sys_state
        (
        OUT     BOOL    *inited,        // iTS系统是否已经初始化   1 - 已初始化  0 - 未初始化
        OUT     BOOL    *autoworked     // 工站自动运行是否已经启动    1 - 已正常启动   0 - 未启动
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_get_sys_state";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_get_sys_state_func_code;
    BOOL inited_val = 0;
    BOOL autoworked_val = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_get_sys_state_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            inited_val = rpl_msg.rpl_par.TSXA_get_sys_state_out_arg.inited;
            autoworked_val = rpl_msg.rpl_par.TSXA_get_sys_state_out_arg.autoworked;
            if( inited != NULL )
            {
                *inited = inited_val;
            }
            if( autoworked != NULL )
            {
                *autoworked = autoworked_val;
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (inited = %d autoworked = %d )", inited_val, autoworked_val);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_get_pos
        (
        IN      int     st_id,      // 工位id
        OUT     double  *pos        // 工位位置
        )

purpose :

input :
    st_id        工位id
output :
    pos          工位位置
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_get_pos
        (
        IN      int     st_id,      // 工位id
        OUT     double  *pos        // 工位位置
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_get_pos";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_get_pos_func_code;
    double pos_val = 0.0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (st_id = %d )", st_id);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_get_pos_in_arg.st_id), (void *)&st_id, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_get_pos_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            pos_val = rpl_msg.rpl_par.TSXA_st_get_pos_out_arg.pos;
            if( pos != NULL )
            {
                *pos = pos_val;
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (pos = %g ) = 0x%x", pos_val, rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_limit
        (
        IN      int station_id,  
        IN      BOOL station_op              //0断开工位使能    1使能工位
        )

purpose :

input :
    station_id      0断开工位使能    1使能工位
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_limit
        (
        IN      int station_id, 
        IN      BOOL station_op              //0断开工位使能    1使能工位
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_limit";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_limit_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (station_id = %d station_op )", station_id, station_op);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_limit_in_arg.station_id), (void *)&station_id, sizeof(int));
        req_msg.req_par.TSXA_st_limit_in_arg.station_op = station_op;

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_limit_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_mv_ison
        (
        IN      int     mover_id,       
        OUT     int*    yes             
        )

purpose :

input :
    mover_id        
output :
    yes             
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_mv_ison
        (
        IN      int     mover_id,       
        OUT     int    *yes             
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_mv_ison";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_mv_ison_func_code;
    int yes_val = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (mover_id = %d )", mover_id);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_mv_ison_in_arg.mover_id), (void *)&mover_id, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_mv_ison_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            yes_val = rpl_msg.rpl_par.TSXA_mv_ison_out_arg.yes;
            if( yes != NULL )
            {
                *yes = yes_val;
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (yes = %d )", yes_val);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_set_station_pv
        (
        IN      int id,     // 是否保存到flash永久保存
        )

purpose :

input :
    id       是否保存到flash永久保存
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_set_station_pv
        (
                IN int id,
                IN double pos,
                IN double vel,
                IN BOOL save_to_flash                   // 是否保存到flash永久保存
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_set_station_pv";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_set_station_pv_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (id = %d pos = %g vel = %g save_to_flash = %d )", id, pos, vel, save_to_flash);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        req_msg.req_par.TSXA_st_set_station_pv_in_arg.id = id;
        req_msg.req_par.TSXA_st_set_station_pv_in_arg.pos = pos;
        req_msg.req_par.TSXA_st_set_station_pv_in_arg.vel = vel;
        req_msg.req_par.TSXA_st_set_station_pv_in_arg.save_to_flash = save_to_flash;

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_set_station_pv_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


/*******************************************************************************
    int TSXA_st_act_limit
        (
        IN      int station_id,     //0断开工位使能    1使能工位
        )

purpose :

input :
    station_id      0断开工位使能    1使能工位
output :
    none
inout :
    none
returns:

*******************************************************************************/
DLL_EXPORT int TSXA_st_act_limit
        (
        IN      int station_id, 
        IN BOOL limit_en          //0断开工位使能    1使能工位
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_act_limit";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_act_limit_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (station_id = %d limit_en = %d)", station_id, limit_en);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        req_msg.req_par.TSXA_st_act_limit_in_arg.station_id = station_id;
        req_msg.req_par.TSXA_st_act_limit_in_arg.limit_en = limit_en;

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_act_limit_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}




DLL_EXPORT int TSXA_st_dianjiao_set
        (
        IN int st_num,              // 有效的工位个数
        IN int st_list[8]           // 点胶有效的工位列表，后续没有使用的用0填充
       )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_dianjiao_set";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_dianjiao_set_func_code;
    int i = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (st_num = %d)", st_num);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        req_msg.req_par.TSXA_st_dianjiao_set_in_arg.st_num = st_num;
        for( i = 0; i < st_num; i++ )
        {
            req_msg.req_par.TSXA_st_dianjiao_set_in_arg.st_list[i] = st_list[i];
        }

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_dianjiao_set_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


DLL_EXPORT int TSXA_st_zhuzhuang_set
        (
        IN int st_num,              // 有效的工位个数
        IN int st_list[8]           // 点胶有效的工位列表，后续没有使用的用0填充
       )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_zhuzhuang_set";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_zhuzhuang_set_func_code;
    int i = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (st_num = %d)", st_num);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        req_msg.req_par.TSXA_st_zhuzhuang_set_in_arg.st_num = st_num;
        for( i = 0; i < st_num; i++ )
        {
            req_msg.req_par.TSXA_st_zhuzhuang_set_in_arg.st_list[i] = st_list[i];
        }

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_zhuzhuang_set_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}




DLL_EXPORT int TSXA_st_set_station_limit
				(
				IN  int st_id,				// 工位id
				IN  BOOL  left_limit,		// 占用时工位左边限位开关，坐标数值小的一边
				IN  BOOL  right_limit		// 工位右边限位开关，坐标数值大的一边
				)
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_set_station_limit";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_set_station_limit_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (st_id = %d left_limit = %d right_limit = %d)", st_id, left_limit, right_limit);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        req_msg.req_par.TSXA_st_set_station_limit_in_arg.st_id = st_id;
        req_msg.req_par.TSXA_st_set_station_limit_in_arg.left_limit = left_limit;
        req_msg.req_par.TSXA_st_set_station_limit_in_arg.right_limit = right_limit;

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_set_station_limit_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}



DLL_EXPORT int TSXA_get_mover_num_in_pos
				(
                    IN double pos1, 
                    IN double pos2, 
                    OUT int *num
                 )
                    
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_get_mover_num_in_pos";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_get_mover_num_in_pos_func_code;
    int mover_num = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (pos1 = %g pos2 = %g)", pos1, pos2);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        req_msg.req_par.TSXA_get_mover_num_in_pos_in_arg.pos1 = pos1;
        req_msg.req_par.TSXA_get_mover_num_in_pos_in_arg.pos2 = pos2;

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_get_mover_num_in_pos_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            mover_num = rpl_msg.rpl_par.TSXA_get_mover_num_in_pos_out_arg.num;
        }
        else
        {
            rtn = func_rtn;
        }
    }

    if( num != NULL )
    {
        *num = mover_num;
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (num = %d) = 0x%x", mover_num, rtn);

    return rtn;
}


DLL_EXPORT int TSXA_emd_glue_check_st_movefront(void)
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_emd_glue_check_st_movefront";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_emd_glue_check_st_movefront_func_code;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> ()");

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_emd_glue_check_st_movefront_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< () = 0x%x", rtn);

    return rtn;
}


DLL_EXPORT int TSXT_select_port_index
        (
        IN      int index
        )
{
    int rtn = OK;
    
    g_tsxa_server_name_select = index;
    
    return rtn;
}


DLL_EXPORT int TSXA_st_get_status
        (
        IN      int     st_id,          // 工位id
        OUT     BOOL    *enable        // 工位是否使能   1 - enable  0 - disable
        )
{
    int rtn = OK;
    int func_rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    TSXI_RPL_MSG_struct rpl_msg;
    char *func_name = "TSXA_st_get_status";
    BOOL simMode = FALSE;
    TSXI_FUNC_enum func_code = TSXA_st_get_status_func_code;
    BOOL en = 0;

    // 入口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "> (st_id = %d )", st_id);

    simMode = DTXA_check_sim_mode_t("TS", DTXA_SIM_MODE_1);
    if( simMode )
    {
        // sim mode1 模式下的默认处理

        rtn = OK;
    }
    else
    {
        /* 对请求消息打包 */
        req_msg.func_code = func_code;
        req_msg.reply_wanted = TRUE;
        req_msg.nc = TSXI_NUM_CODE;

        /* 包含其他参数 */
        memcpy((void *)&(req_msg.req_par.TSXA_st_get_status_in_arg.st_id), (void *)&st_id, sizeof(int));

        /* 发送请求消息，接收返回消息 */
        func_rtn = TSXI_snd_req_rec_rpl_msg( &req_msg, &rpl_msg, func_code, 
                       sizeof(TSXI_TSXA_st_get_status_req_struct), TSXA_DEFAULT_TIMEOUT, 0);
        if(func_rtn == OK)
        {
            rtn = rpl_msg.error_code; 
            en = rpl_msg.rpl_par.TSXA_st_get_status_out_arg.enable;
            if( enable != NULL )
            {
                *enable = en;
            }
        }
        else
        {
            rtn = func_rtn;
        }
    }

    // 出口trace，需要人工检查修改
    DTXA_trace_t("TS", DTXA_TRACE_EXT, func_name, "< (enable = %d )", en);

    return rtn;
}


/*******************************************************************************
    int TSXT_exit_TSMA_task
        (
        IN      BOOL use_MA_2
        )

purpose :
    用于退出组件任务。测试接口。
input :
    use_MA_2        组件任务是否有两个
output :
    none
inout :
    none
returns:
    OK
*******************************************************************************/
DLL_EXPORT int TSXT_exit_TSMA_task
        (
        IN      BOOL use_MA_2
        )
{
    int rtn = OK;
    TSXI_REQ_MSG_struct req_msg;
    char *func_name = "TSXT_exit_TSMA_task";
    TSXI_FUNC_enum func_code = TSMA_EXIT_func_code;

    /* 对请求消息打包 */
    req_msg.func_code = func_code;
    req_msg.reply_wanted = FALSE;
    req_msg.nc = TSXI_NUM_CODE;

    /* 发送请求消息，无返回消息 */
    rtn = TSXI_snd_req_msg( &req_msg, 16, TSXA_DEFAULT_TIMEOUT, 0);
    if( use_MA_2 )
    {
        rtn = TSXI_snd_req_msg( &req_msg, 16, TSXA_DEFAULT_TIMEOUT, 1);
    }

    return rtn;
}



// 刷新工位的动子到位情况
void tsxa_st_get_mover_id_all_t(void *dummy)
{
    int rtn = OK;
    int reached_num_0 = 0;
    int reached_num_32 = 0;
    int st_id[32] = { 0 };
    int st_id_32[32] = { 0 };
    int mover_id[32] = { 0 };
    int mover_id_32[32] = { 0 };
    int i = 0;
    int st_id_value = 0;
    int mover_id_value = 0;

    tsxa_st_get_mover_id_info_struct st_info[64] = { 0 };

    g_tsxa_st_get_mover_id_thread_id = 0;

    for(;;)
    {
        g_tsxa_st_get_mover_id_thread_id = GetCurrentThreadId();   
            
        // 先清0
        for( i = 0; i < 64; i++ )
        {
            st_info[i].reached = FALSE;
            st_info[i].mover_id = 252;
        }

        rtn = TSXA_st_get_all_mover_id(&reached_num_0, st_id, mover_id);
        if( OK == rtn )
        {
            // 填入reached的st的信息
            for( i = 0; i < reached_num_0; i++ )
            {
                st_id_value = st_id[i];
                st_info[st_id_value].reached = TRUE;
                st_info[st_id_value].mover_id = mover_id[i];
            }
        }
        g_tsxa_st_get_mover_id_rtn = rtn;

        rtn = TSXA_st_get_all_mover_id_32(&reached_num_32, st_id_32, mover_id_32);
        if( OK == rtn )
        {
            // 填入reached的st的信息
            for( i = 0; i < reached_num_32; i++ )
            {
                st_id_value = st_id_32[i];
                st_info[st_id_value].reached = TRUE;
                st_info[st_id_value].mover_id = mover_id_32[i];
            }
        }
        g_tsxa_st_get_mover_id_rtn = rtn;

        // 最后一起存到全局数据里
        for( i = 0; i < 64; i++ )
        {
            g_tsxa_st_get_mover_id[i].reached = st_info[i].reached;
            g_tsxa_st_get_mover_id[i].mover_id = st_info[i].mover_id;
        }
        
        Sleep(15);
        
    }

    g_tsxa_st_get_mover_id_thread_id = 0;

    return ;
}


int  tsxa_st_get_mover_id_all_start(void)
{
    int rtn = OK;

    _beginthread(tsxa_st_get_mover_id_all_t, 16*1024*1024, NULL);

    return rtn;
}


// 重启tsma
DLL_EXPORT int TSXA_tsma_restart(void)
{
    int rtn = OK;
    
    system("start base_restart.bat");
    
    return rtn;
}


#if 0

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
	case DLL_THREAD_ATTACH:
	case DLL_THREAD_DETACH:
	case DLL_PROCESS_DETACH:
		break;
	}
	return TRUE;
}

#endif


DLL_EXPORT int TSXA_st_get_all_mover_id_1
        (  
		OUT     int st_reached_num,// 工位上有动子到达的工位个数
        OUT     int st_reached_id_list[32],         // 有动子到达的工位编号列表
        OUT     int reaced_mover_id_list[32]        // 到达相应工位的动子编号
        )
{


	return 0;
}